(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{420:function(t,s,e){"use strict";e.r(s);var a=e(42),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vs-code-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vs-code-api"}},[t._v("#")]),t._v(" VS Code API")]),t._v(" "),e("p",[e("strong",[t._v("VS Code API")]),t._v("是VS Code提供给插件使用的一系列Javascript API。")]),t._v(" "),e("p",[t._v("!> 注意：VS Code API 变动较快，翻译版本的参与人员和精力有限无法保证实时跟进，有需要的小伙伴请自行参考"),e("a",{attrs:{href:"https://code.visualstudio.com/api/references/vscode-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),e("OutboundLink")],1),t._v("，其中包含了完整而且是最新的VS Code API列表。")]),t._v(" "),e("h2",{attrs:{id:"api模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api模式"}},[t._v("#")]),t._v(" API模式")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("以下将介绍我们在VS Code中经常使用的API模式。")]),t._v(" "),e("h4",{attrs:{id:"promises-异步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promises-异步"}},[t._v("#")]),t._v(" Promises（异步）")]),t._v(" "),e("p",[t._v("VS Code API完全采用了promise的实现。对于插件来说允许任何promise形式的返回格式，如ES6，WinJS，A+等。")]),t._v(" "),e("p",[t._v("一个promise库需要它的API使用"),e("code",[t._v("Thenable")]),t._v("类型来表达，"),e("code",[t._v("Thenable")]),t._v("类型代表了一种通用特性的实现——then方法。")]),t._v(" "),e("p",[t._v("大多数时候promise是一个可选项，VS Code调用插件之后，它能直接处理正常的返回结果也能处理"),e("code",[t._v("Thenable")]),t._v("的结果类型。当promise是可选的API返回结果时，API会在返回类型中用"),e("code",[t._v("Thenable")]),t._v("表示。")]),t._v(" "),e("div",{staticClass:"language-typescript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("provideNumber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Thenable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h4",{attrs:{id:"cancellation-tokens-取消式令牌"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cancellation-tokens-取消式令牌"}},[t._v("#")]),t._v(" Cancellation Tokens（取消式令牌）")]),t._v(" "),e("p",[t._v("有些事件可能从不稳定的变化状态开始，而随着状态变化这一事件最后肯能被取消了。比如：IntelliSense（智能补全）被触发后，用户持续输入的行为使得这一操作最终被取消了。")]),t._v(" "),e("p",[t._v("API也为这种行为提供了解决方案，你可以通过"),e("code",[t._v("CancellationToken")]),t._v("检查取消的状态（"),e("code",[t._v("isCancellationRequested")]),t._v("）或者当"),e("em",[t._v("取消")]),t._v("发生时得到通知（"),e("code",[t._v("onCancellationRequested")]),t._v("）。取消式令牌通常是API函数的最后一个（可选）参数。")]),t._v(" "),e("h4",{attrs:{id:"disposables-释放器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disposables-释放器"}},[t._v("#")]),t._v(" Disposables（释放器）")]),t._v(" "),e("p",[t._v("VS Code API使用了"),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Dispose_pattern",target:"_blank",rel:"noopener noreferrer"}},[t._v("释放器模式"),e("OutboundLink")],1),t._v("，这个模式被用于事件侦听，命令，UI交互和各类语言配置上。")]),t._v(" "),e("p",[t._v("例如："),e("code",[t._v("setStatusBarMessage(value: string)")]),t._v("事件返回一个"),e("code",[t._v("Disposable")]),t._v("对象，这个对象最终调用"),e("code",[t._v("dispose")]),t._v("方法移除message。")]),t._v(" "),e("h4",{attrs:{id:"events-事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#events-事件"}},[t._v("#")]),t._v(" Events（事件）")]),t._v(" "),e("p",[t._v("事件在API中被暴露为函数，当你订阅一个事件侦听器时绑定。事件侦听器调用后会返回一个"),e("code",[t._v("Disposable")]),t._v("，它会在dispose触发后，移除事件侦听器。")]),t._v(" "),e("div",{staticClass:"language-typescript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("listener")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"It happened"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始侦听")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" subscription "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fsWatcher"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("onDidDelete")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listener"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 你的代码")]),t._v("\n\nsubscription"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispose")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 停止侦听")]),t._v("\n")])])]),e("p",[t._v("事件的命名规则遵循"),e("code",[t._v("on[Will | Did] 动词 + 名词")]),t._v("的形式。通过"),e("code",[t._v("onWill")]),t._v("表示将要发生，"),e("code",[t._v("onDid")]),t._v("表示已经发生，"),e("code",[t._v("动词")]),t._v("表示行为，"),e("code",[t._v("名词")]),t._v("指代上下文或目标。")]),t._v(" "),e("p",[t._v("举个栗子："),e("code",[t._v("window.onDidChangeActiveTextEditor")]),t._v("中，激活的编辑器（ActiveTextEditor："),e("code",[t._v("名词")]),t._v("）变动（change："),e("code",[t._v("动词")]),t._v("）后（"),e("code",[t._v("onDid")]),t._v("）会触发事件。")]),t._v(" "),e("h4",{attrs:{id:"严格null检查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#严格null检查"}},[t._v("#")]),t._v(" 严格null检查")]),t._v(" "),e("p",[t._v("VS CodeAPI使用"),e("code",[t._v("undefined")]),t._v("和"),e("code",[t._v("null")]),t._v("的Typescript类型，同样也支持"),e("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/pull/7140",target:"_blank",rel:"noopener noreferrer"}},[t._v("严格null检查"),e("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);s.default=n.exports}}]);